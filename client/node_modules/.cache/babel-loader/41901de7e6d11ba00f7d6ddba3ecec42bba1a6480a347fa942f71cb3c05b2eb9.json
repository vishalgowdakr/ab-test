{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { roundNumber } from '../../plain/number/index.js';\nvar NO_INT = 'Number of decimals in function round must be an integer';\nvar name = 'round';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\nexport var createRound = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    BigNumber,\n    DenseMatrix\n  } = _ref;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n\n  /**\n   * Round a value towards the nearest rounded value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *    math.round(unit, valuelessUnit)\n   *    math.round(unit, n, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.round(3.22)             // returns number 3\n   *    math.round(3.82)             // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(3.22, 1)          // returns number 3.2\n   *    math.round(3.88, 1)          // returns number 3.9\n   *    math.round(-4.21, 1)         // returns number -4.2\n   *    math.round(-4.71, 1)         // returns number -4.7\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    const unit = math.unit('3.241 cm')\n   *    const cm = math.unit('cm')\n   *    const mm = math.unit('mm')\n   *    math.round(unit, 1, cm)      // returns Unit 3.2 cm\n   *    math.round(unit, 1, mm)      // returns Unit 32.4 mm\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x  Value to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @param  {Unit} [valuelessUnit]                                        A valueless unit\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  return typed(name, {\n    number: roundNumber,\n    'number, number': roundNumber,\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return new BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    Complex: function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      var _n = n.toNumber();\n      return x.round(_n);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n.toNumber());\n    },\n    'Unit, number, Unit': typed.referToSelf(self => function (x, n, unit) {\n      var valueless = x.toNumeric(unit);\n      return unit.multiply(self(valueless, n));\n    }),\n    'Unit, BigNumber, Unit': typed.referToSelf(self => (x, n, unit) => self(x, n.toNumber(), unit)),\n    'Unit, Unit': typed.referToSelf(self => (x, unit) => self(x, 0, unit)),\n    'Array | Matrix, number, Unit': typed.referToSelf(self => (x, n, unit) => {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, value => self(value, n, unit), true);\n    }),\n    'Array | Matrix, BigNumber, Unit': typed.referToSelf(self => (x, n, unit) => self(x, n.toNumber(), unit)),\n    'Array | Matrix, Unit': typed.referToSelf(self => (x, unit) => self(x, 0, unit)),\n    'Array | Matrix': typed.referToSelf(self => x => {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, self, true);\n    }),\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, n) => {\n      return matAlgo11xS0s(x, n, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, n) => {\n      return matAlgo14xDs(x, n, self, false);\n    }),\n    'Array, number | BigNumber': typed.referToSelf(self => (x, n) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(x), n, self, false).valueOf();\n    }),\n    'number | Complex | BigNumber | Fraction, SparseMatrix': typed.referToSelf(self => (x, n) => {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(n.size(), n.storage());\n      }\n      return matAlgo12xSfs(n, x, self, true);\n    }),\n    'number | Complex | BigNumber | Fraction, DenseMatrix': typed.referToSelf(self => (x, n) => {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(n.size(), n.storage());\n      }\n      return matAlgo14xDs(n, x, self, true);\n    }),\n    'number | Complex | BigNumber | Fraction, Array': typed.referToSelf(self => (x, n) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(n), x, self, true).valueOf();\n    })\n  });\n});","map":{"version":3,"names":["factory","deepMap","createMatAlgo11xS0s","createMatAlgo12xSfs","createMatAlgo14xDs","roundNumber","NO_INT","name","dependencies","createRound","_ref","typed","matrix","equalScalar","zeros","BigNumber","DenseMatrix","matAlgo11xS0s","matAlgo12xSfs","matAlgo14xDs","number","numberBigNumber","x","n","isInteger","TypeError","toDecimalPlaces","toNumber","Complex","round","ComplexNumber","ComplexBigNumber","_n","BigNumberBigNumber","Fraction","FractionNumber","FractionBigNumber","referToSelf","self","unit","valueless","toNumeric","multiply","value","valueOf","size","storage"],"sources":["/home/vishal/Documents/htmx/abtest/node_modules/mathjs/lib/esm/function/arithmetic/round.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { roundNumber } from '../../plain/number/index.js';\nvar NO_INT = 'Number of decimals in function round must be an integer';\nvar name = 'round';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\nexport var createRound = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    BigNumber,\n    DenseMatrix\n  } = _ref;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n\n  /**\n   * Round a value towards the nearest rounded value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *    math.round(unit, valuelessUnit)\n   *    math.round(unit, n, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.round(3.22)             // returns number 3\n   *    math.round(3.82)             // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(3.22, 1)          // returns number 3.2\n   *    math.round(3.88, 1)          // returns number 3.9\n   *    math.round(-4.21, 1)         // returns number -4.2\n   *    math.round(-4.71, 1)         // returns number -4.7\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    const unit = math.unit('3.241 cm')\n   *    const cm = math.unit('cm')\n   *    const mm = math.unit('mm')\n   *    math.round(unit, 1, cm)      // returns Unit 3.2 cm\n   *    math.round(unit, 1, mm)      // returns Unit 32.4 mm\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x  Value to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @param  {Unit} [valuelessUnit]                                        A valueless unit\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  return typed(name, {\n    number: roundNumber,\n    'number, number': roundNumber,\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return new BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    Complex: function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      var _n = n.toNumber();\n      return x.round(_n);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n.toNumber());\n    },\n    'Unit, number, Unit': typed.referToSelf(self => function (x, n, unit) {\n      var valueless = x.toNumeric(unit);\n      return unit.multiply(self(valueless, n));\n    }),\n    'Unit, BigNumber, Unit': typed.referToSelf(self => (x, n, unit) => self(x, n.toNumber(), unit)),\n    'Unit, Unit': typed.referToSelf(self => (x, unit) => self(x, 0, unit)),\n    'Array | Matrix, number, Unit': typed.referToSelf(self => (x, n, unit) => {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, value => self(value, n, unit), true);\n    }),\n    'Array | Matrix, BigNumber, Unit': typed.referToSelf(self => (x, n, unit) => self(x, n.toNumber(), unit)),\n    'Array | Matrix, Unit': typed.referToSelf(self => (x, unit) => self(x, 0, unit)),\n    'Array | Matrix': typed.referToSelf(self => x => {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, self, true);\n    }),\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, n) => {\n      return matAlgo11xS0s(x, n, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, n) => {\n      return matAlgo14xDs(x, n, self, false);\n    }),\n    'Array, number | BigNumber': typed.referToSelf(self => (x, n) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(x), n, self, false).valueOf();\n    }),\n    'number | Complex | BigNumber | Fraction, SparseMatrix': typed.referToSelf(self => (x, n) => {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(n.size(), n.storage());\n      }\n      return matAlgo12xSfs(n, x, self, true);\n    }),\n    'number | Complex | BigNumber | Fraction, DenseMatrix': typed.referToSelf(self => (x, n) => {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(n.size(), n.storage());\n      }\n      return matAlgo14xDs(n, x, self, true);\n    }),\n    'number | Complex | BigNumber | Fraction, Array': typed.referToSelf(self => (x, n) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(n), x, self, true).valueOf();\n    })\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}