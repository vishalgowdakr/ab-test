{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { noBignumber, noMatrix } from '../../utils/noop.js';\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq', 'add', 'isPositive'];\nexport var createRange = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    bignumber,\n    smaller,\n    smallerEq,\n    larger,\n    largerEq,\n    add,\n    isPositive\n  } = _ref;\n  /**\n   * Create an array from a range.\n   * By default, the range end is excluded. This can be customized by providing\n   * an extra parameter `includeEnd`.\n   *\n   * Syntax:\n   *\n   *     math.range(str [, includeEnd])               // Create a range from a string,\n   *                                                  // where the string contains the\n   *                                                  // start, optional step, and end,\n   *                                                  // separated by a colon.\n   *     math.range(start, end [, includeEnd])        // Create a range with start and\n   *                                                  // end and a step size of 1.\n   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n   *                                                  // and end.\n   *\n   * Where:\n   *\n   * - `str: string`\n   *   A string 'start:end' or 'start:step:end'\n   * - `start: {number | BigNumber | Unit}`\n   *   Start of the range\n   * - `end: number | BigNumber | Unit`\n   *   End of the range, excluded by default, included when parameter includeEnd=true\n   * - `step: number | BigNumber | Unit`\n   *   Step size. Default value is 1.\n   * - `includeEnd: boolean`\n   *   Option to specify whether to include the end or not. False by default.\n   *\n   * Examples:\n   *\n   *     math.range(2, 6)        // [2, 3, 4, 5]\n   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]\n   *     math.range('2:1:6')     // [2, 3, 4, 5]\n   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]\n   *     math.range(math.unit(2, 'm'), math.unit(-3, 'm'), math.unit(-1, 'm')) // [2 m, 1 m, 0 m , -1 m, -2 m]\n   *\n   * See also:\n   *\n   *     ones, zeros, size, subset\n   *\n   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n   * @return {Array | Matrix} range\n   */\n  return typed(name, {\n    // TODO: simplify signatures when typed-function supports default values and optional arguments\n\n    // TODO: a number or boolean should not be converted to string here\n    string: _strRange,\n    'string, boolean': _strRange,\n    'number, number': function numberNumber(start, end) {\n      return _out(_range(start, end, 1, false));\n    },\n    'number, number, number': function numberNumberNumber(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {\n      return _out(_range(start, end, 1, includeEnd));\n    },\n    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {\n      var BigNumber = start.constructor;\n      return _out(_range(start, end, new BigNumber(1), false));\n    },\n    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {\n      var BigNumber = start.constructor;\n      return _out(_range(start, end, new BigNumber(1), includeEnd));\n    },\n    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    },\n    'Unit, Unit, Unit': function UnitUnitUnit(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'Unit, Unit, Unit, boolean': function UnitUnitUnitBoolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    }\n  });\n  function _out(arr) {\n    if (config.matrix === 'Matrix') {\n      return matrix ? matrix(arr) : noMatrix();\n    }\n    return arr;\n  }\n  function _strRange(str, includeEnd) {\n    var r = _parse(str);\n    if (!r) {\n      throw new SyntaxError('String \"' + str + '\" is no valid range');\n    }\n    if (config.number === 'BigNumber') {\n      if (bignumber === undefined) {\n        noBignumber();\n      }\n      return _out(_range(bignumber(r.start), bignumber(r.end), bignumber(r.step)), includeEnd);\n    } else {\n      return _out(_range(r.start, r.end, r.step, includeEnd));\n    }\n  }\n\n  /**\n   * Create a range with numbers or BigNumbers\n   * @param {number | BigNumber | Unit} start\n   * @param {number | BigNumber | Unit} end\n   * @param {number | BigNumber | Unit} step\n   * @param {boolean} includeEnd\n   * @returns {Array} range\n   * @private\n   */\n  function _range(start, end, step, includeEnd) {\n    var array = [];\n    var ongoing = isPositive(step) ? includeEnd ? smallerEq : smaller : includeEnd ? largerEq : larger;\n    var x = start;\n    while (ongoing(x, end)) {\n      array.push(x);\n      x = add(x, step);\n    }\n    return array;\n  }\n\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @param {string} str\n   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step\n   * @private\n   */\n  function _parse(str) {\n    var args = str.split(':');\n\n    // number\n    var nums = args.map(function (arg) {\n      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string\n      return Number(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n    if (invalid) {\n      return null;\n    }\n    switch (nums.length) {\n      case 2:\n        return {\n          start: nums[0],\n          end: nums[1],\n          step: 1\n        };\n      case 3:\n        return {\n          start: nums[0],\n          end: nums[2],\n          step: nums[1]\n        };\n      default:\n        return null;\n    }\n  }\n});","map":{"version":3,"names":["factory","noBignumber","noMatrix","name","dependencies","createRange","_ref","typed","config","matrix","bignumber","smaller","smallerEq","larger","largerEq","add","isPositive","string","_strRange","numberNumber","start","end","_out","_range","numberNumberNumber","step","numberNumberBoolean","includeEnd","numberNumberNumberBoolean","BigNumberBigNumber","BigNumber","constructor","BigNumberBigNumberBigNumber","BigNumberBigNumberBoolean","BigNumberBigNumberBigNumberBoolean","UnitUnitUnit","UnitUnitUnitBoolean","arr","str","r","_parse","SyntaxError","number","undefined","array","ongoing","x","push","args","split","nums","map","arg","Number","invalid","some","num","isNaN","length"],"sources":["/home/vishal/Documents/htmx/abtest/node_modules/mathjs/lib/esm/function/matrix/range.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { noBignumber, noMatrix } from '../../utils/noop.js';\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq', 'add', 'isPositive'];\nexport var createRange = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    bignumber,\n    smaller,\n    smallerEq,\n    larger,\n    largerEq,\n    add,\n    isPositive\n  } = _ref;\n  /**\n   * Create an array from a range.\n   * By default, the range end is excluded. This can be customized by providing\n   * an extra parameter `includeEnd`.\n   *\n   * Syntax:\n   *\n   *     math.range(str [, includeEnd])               // Create a range from a string,\n   *                                                  // where the string contains the\n   *                                                  // start, optional step, and end,\n   *                                                  // separated by a colon.\n   *     math.range(start, end [, includeEnd])        // Create a range with start and\n   *                                                  // end and a step size of 1.\n   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n   *                                                  // and end.\n   *\n   * Where:\n   *\n   * - `str: string`\n   *   A string 'start:end' or 'start:step:end'\n   * - `start: {number | BigNumber | Unit}`\n   *   Start of the range\n   * - `end: number | BigNumber | Unit`\n   *   End of the range, excluded by default, included when parameter includeEnd=true\n   * - `step: number | BigNumber | Unit`\n   *   Step size. Default value is 1.\n   * - `includeEnd: boolean`\n   *   Option to specify whether to include the end or not. False by default.\n   *\n   * Examples:\n   *\n   *     math.range(2, 6)        // [2, 3, 4, 5]\n   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]\n   *     math.range('2:1:6')     // [2, 3, 4, 5]\n   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]\n   *     math.range(math.unit(2, 'm'), math.unit(-3, 'm'), math.unit(-1, 'm')) // [2 m, 1 m, 0 m , -1 m, -2 m]\n   *\n   * See also:\n   *\n   *     ones, zeros, size, subset\n   *\n   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n   * @return {Array | Matrix} range\n   */\n  return typed(name, {\n    // TODO: simplify signatures when typed-function supports default values and optional arguments\n\n    // TODO: a number or boolean should not be converted to string here\n    string: _strRange,\n    'string, boolean': _strRange,\n    'number, number': function numberNumber(start, end) {\n      return _out(_range(start, end, 1, false));\n    },\n    'number, number, number': function numberNumberNumber(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {\n      return _out(_range(start, end, 1, includeEnd));\n    },\n    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {\n      var BigNumber = start.constructor;\n      return _out(_range(start, end, new BigNumber(1), false));\n    },\n    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {\n      var BigNumber = start.constructor;\n      return _out(_range(start, end, new BigNumber(1), includeEnd));\n    },\n    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    },\n    'Unit, Unit, Unit': function UnitUnitUnit(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'Unit, Unit, Unit, boolean': function UnitUnitUnitBoolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    }\n  });\n  function _out(arr) {\n    if (config.matrix === 'Matrix') {\n      return matrix ? matrix(arr) : noMatrix();\n    }\n    return arr;\n  }\n  function _strRange(str, includeEnd) {\n    var r = _parse(str);\n    if (!r) {\n      throw new SyntaxError('String \"' + str + '\" is no valid range');\n    }\n    if (config.number === 'BigNumber') {\n      if (bignumber === undefined) {\n        noBignumber();\n      }\n      return _out(_range(bignumber(r.start), bignumber(r.end), bignumber(r.step)), includeEnd);\n    } else {\n      return _out(_range(r.start, r.end, r.step, includeEnd));\n    }\n  }\n\n  /**\n   * Create a range with numbers or BigNumbers\n   * @param {number | BigNumber | Unit} start\n   * @param {number | BigNumber | Unit} end\n   * @param {number | BigNumber | Unit} step\n   * @param {boolean} includeEnd\n   * @returns {Array} range\n   * @private\n   */\n  function _range(start, end, step, includeEnd) {\n    var array = [];\n    var ongoing = isPositive(step) ? includeEnd ? smallerEq : smaller : includeEnd ? largerEq : larger;\n    var x = start;\n    while (ongoing(x, end)) {\n      array.push(x);\n      x = add(x, step);\n    }\n    return array;\n  }\n\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @param {string} str\n   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step\n   * @private\n   */\n  function _parse(str) {\n    var args = str.split(':');\n\n    // number\n    var nums = args.map(function (arg) {\n      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string\n      return Number(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n    if (invalid) {\n      return null;\n    }\n    switch (nums.length) {\n      case 2:\n        return {\n          start: nums[0],\n          end: nums[1],\n          step: 1\n        };\n      case 3:\n        return {\n          start: nums[0],\n          end: nums[2],\n          step: nums[1]\n        };\n      default:\n        return null;\n    }\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}